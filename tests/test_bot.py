import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from bot import escape_markdown_v2, render_response, analyze_image_with_gemini, handle_image

# –¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

def test_escape_markdown_v2():
    assert escape_markdown_v2("Hello. World!") == "Hello\\. World\\!"
    assert escape_markdown_v2("_*[]()~`>#+-=|{}.!") == "\\_\\*\[\]\\(\\)\\~\\`\\>\\#\\+\\-\\=\\|\\{\}\\.\\!"
    assert escape_markdown_v2("No special chars") == "No special chars"
    assert escape_markdown_v2("") == ""

def test_render_response_full_data():
    data = {
        'message': 'Test message',
        'gps': {'latitude': 12.34, 'longitude': 56.78},
        'address': 'Test address',
        'date': '2025-01-01',
        'promo': 'TESTPROMO', # –≠—Ç–æ—Ç –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å GPS
        'error': 'Test error'
    }
    expected = "üîÆ Test message\\n\\n‚ùóÔ∏è Test error\\n\\nüåé `12.34 56.78`\\n\\nüö© `Test address`\\n\\nüì∏ `2025-01-01`"
    assert render_response(data) == expected

def test_render_response_only_promo():
    data = {'promo': 'PROMO123', 'message': 'Got a promo!'}
    expected = "üîÆ Got a promo!\\n\\nüí∞ `PROMO123`"
    assert render_response(data) == expected

def test_render_response_only_error():
    data = {'error': 'Something went wrong'}
    expected = "‚ùóÔ∏è Something went wrong"
    assert render_response(data) == expected

def test_render_response_empty():
    assert render_response({}) == ""

# –¢–µ—Å—Ç—ã –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pytest-asyncio –∏ –º–æ–∫–æ–≤

@pytest.mark.asyncio
@patch('bot.genai.GenerativeModel')
async def test_analyze_image_with_gemini_success(MockGenerativeModel):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞
    mock_response = MagicMock()
    mock_response.text = '```json\n{"message": "Success"}\n```'
    
    mock_model_instance = MockGenerativeModel.return_value
    mock_model_instance.generate_content_async = AsyncMock(return_value=mock_response)

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    image_bytes = b'fake-image-data'
    result = await analyze_image_with_gemini(image_bytes)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert result == {"message": "Success"}
    mock_model_instance.generate_content_async.assert_called_once()

@pytest.mark.asyncio
@patch('bot.genai.GenerativeModel')
async def test_analyze_image_with_gemini_api_error(MockGenerativeModel):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    mock_model_instance = MockGenerativeModel.return_value
    mock_model_instance.generate_content_async.side_effect = Exception("API Failure")

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    result = await analyze_image_with_gemini(b'fake-image-data')

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert "error" in result
    assert "API Failure" in result["error"]

@pytest.mark.asyncio
async def test_handle_image_flow():
    # --- –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–æ–≤ Telegram ---
    update = MagicMock()
    context = MagicMock()
    
    # –ú–æ–∫ –¥–ª—è chat
    update.message.chat.id = 12345 # ID —á–∞—Ç–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –≤–∞–∂–µ–Ω, –Ω–æ –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ API
    update.message.message_id = 54321
    
    # –ú–æ–∫ –¥–ª—è photo
    photo_size = MagicMock()
    photo_size.file_id = 'file_id_123'
    update.message.photo = [photo_size]
    
    # –ú–æ–∫ –¥–ª—è bot
    context.bot = AsyncMock()
    context.bot.get_file.return_value.download_as_bytearray = AsyncMock(return_value=b'fake_image')
    
    # –ú–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_message = MagicMock()
    sent_message.message_id = 54322
    context.bot.send_message.return_value = sent_message # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_message –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∫–∞
    update.message.reply_text = AsyncMock(return_value=sent_message)

    # --- –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π --- 
    with patch('bot.analyze_image_with_gemini', new_callable=AsyncMock) as mock_analyze:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º, —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç Gemini
        gemini_result = {
            'message': '–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω',
            'gps': {'latitude': 55.75, 'longitude': 37.61}
        }
        mock_analyze.return_value = gemini_result

        # --- –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
        await handle_image(update, context)

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ ---
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        update.message.reply_text.assert_called_once_with(
            "üëÄ –°–º–æ—Ç—Ä—é\\.\\.\\.",
            reply_to_message_id=54321,
            parse_mode='MarkdownV2'
        )

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        mock_analyze.assert_called_once_with(b'fake_image')

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        final_text_call = context.bot.edit_message_text.call_args
        assert final_text_call.kwargs['chat_id'] == 12345
        assert final_text_call.kwargs['message_id'] == 54322
        assert "–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω" in final_text_call.kwargs['text']
        assert "55.75 37.61" in final_text_call.kwargs['text']
        assert final_text_call.kwargs['reply_markup'] is not None # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
