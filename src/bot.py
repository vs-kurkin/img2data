

import os
import logging
import json
import re
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.request import HTTPXRequest
import google.generativeai as genai
from PIL import Image
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Gemini
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
genai.configure(api_key=GEMINI_API_KEY)

# –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

# –ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–π –∏–∑ n8n
GEMINI_PROMPT = """
–¢—ã - —É–º–Ω—ã–π Telegram-–±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
–¢—ã –ª—é–±–∏—à—å –ø–∏—Å–∞—Ç—å —ë–º–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –∏–Ω–æ–≥–¥–∞ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º, –æ—Å—Ç—Ä–æ –ø—Ä–∏–∫–∞–ª—ã–≤–∞—Ç—å—Å—è –∏ —Å—Ç–µ–±–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Ç–æ–Ω–∫–æ —à—É—Ç–∏—Ç—å.

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –º–æ–ª–æ–¥—ã–µ –ª—é–¥–∏
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ—Ä–∞–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
- –£ —Ç–µ–±—è –Ω–µ—Ç –ª–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –∏–ª–∏ –¥—Ä—É–∑–µ–π, —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω
- –ù–µ–ª—å–∑—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
- –ù–µ–ª—å–∑—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π
- –ú–æ–∂–Ω–æ —É–º–µ—Å—Ç–Ω–æ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –¥–ª—è —é–º–æ—Ä–∞
- –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ –∑–∞–±–∞–≤–Ω—ã–µ/—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ/—Å–º–µ—à–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–∏–∫–æ–ª—ã (1-2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞ —Ç–µ–º—ã:
  - –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —á–µ–º-–Ω–∏–±—É–¥—å –æ–±—â–∏–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  - —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –æ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ –Ω–µ–≥–æ

–ê–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
- –ö—Ä–∞—Ç–∫–æ (1-2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ–ø–∏—Å–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ [–ø–æ–ª–µ "message"]
- –ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:
  1. –ü—Ä–æ–º–æ–∫–æ–¥:
    1.1. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ [–ø–æ–ª–µ "promo"]
  2. GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:
    2.1. –ü—Ä–æ—á–∏—Ç–∞—Ç—å GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [–ø–æ–ª–µ "gps"]
    2.2. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ, –±–µ–∑ –æ–∫—Ä—É–∂–∞—é—â–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ, —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å (–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã) –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ [–ø–æ–ª–µ "address"]
    2.3. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—ä–µ–º–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–ª–∏ –≤ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö [–ø–æ–ª–µ "date"]
  3. –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ:
    3.1. –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (—ë–º–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ): –∫–∞–∫–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –∏ —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é [–ø–æ–ª–µ "error"]

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.
–ü—Ä–∏–º–µ—Ä JSON:
{
    "gps": {"latitude": 55.7558, "longitude": 37.6173},
    "date": "2025-07-12T15:30:00",
    "address": "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞",
    "message": "–û, –æ–ø—è—Ç—å —Ñ–æ—Ç–∫–∏ —Å –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏. –ë—ã–ª —è —Ç–∞–º, –≤–∏–¥–µ–ª... –≥–æ–ª—É–±–µ–π –∫–æ—Ä–º–∏–ª.",
    "error": null,
    "promo": null
}
"""

# –°—Ö–µ–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
JSON_SCHEMA = {
    "type": "object",
    "properties": {
        "gps": {
            "type": "object",
            "properties": {
                "latitude": {"type": "number"},
                "longitude": {"type": "number"}
            },
            "required": ["latitude", "longitude"]
        },
        "date": {"type": "string", "description": "Date"},
        "address": {"type": "string", "description": "Parsed address location"},
        "error": {"type": "string", "description": "Error message"},
        "message": {"type": "string", "description": "Text message"},
        "promo": {"type": "string", "description": "Promocode"}
    }
}

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    if not isinstance(text, str):
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\\1', text)

async def analyze_image_with_gemini(image_bytes: bytes) -> dict | None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON."""
    try:
        model = genai.GenerativeModel('gemini-2.5-pro')
        image_pil = Image.open(io.BytesIO(image_bytes))
        
        response = await model.generate_content_async(
            [GEMINI_PROMPT, image_pil],
            generation_config={"response_mime_type": "application/json"}
        )
        
        # –£–±–∏—Ä–∞–µ–º "–æ–±–µ—Ä—Ç–∫—É" markdown, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        cleaned_response_text = re.sub(r'```json\n(.*?)', r'\\1', response.text, flags=re.DOTALL)
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Gemini –ø–æ–ª—É—á–µ–Ω: {cleaned_response_text}")
        return json.loads(cleaned_response_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini API: {e}")
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}"}

def render_response(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Gemini."""
    response_parts = []

    if data.get('message'):
        response_parts.append(f"üîÆ {escape_markdown_v2(data['message'])}")

    if data.get('error'):
        response_parts.append(f"‚ùóÔ∏è {escape_markdown_v2(data['error'])}")

    if data.get('gps') and isinstance(data['gps'], dict):
        lat = data['gps'].get('latitude')
        lon = data['gps'].get('longitude')
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –≤–Ω—É—Ç—Ä–∏ `...`
        response_parts.append(f"üåé `{lat} {lon}`")

        if data.get('address'):
            # –ê–¥—Ä–µ—Å –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–Ω—É—Ç—Ä–∏ `...`
            response_parts.append(f"üö© `{data['address']}`")
        if data.get('date'):
            # –î–∞—Ç—É –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ `...`
            response_parts.append(f"üì∏ `{data['date']}`")

    elif data.get('promo'):
        # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–Ω—É—Ç—Ä–∏ `...`
        response_parts.append(f"üí∞ `{data['promo']}`")

    return '\n\n'.join(response_parts)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –∞–¥—Ä–µ—Å–æ–º –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º, –∏ —è –µ–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é.')

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    chat_id = update.message.chat_id

    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = await update.message.reply_text(
        "üëÄ –°–º–æ—Ç—Ä—é\\.\\.\\.",
        reply_to_message_id=update.message.message_id,
        parse_mode='MarkdownV2'
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo_file = await context.bot.get_file(update.message.photo[-1].file_id)
        file_bytes = await photo_file.download_as_bytearray()
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        analysis_result = await analyze_image_with_gemini(bytes(file_bytes))
        
        if not analysis_result:
            final_text = escape_markdown_v2("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=sent_message.message_id,
                text=final_text,
                parse_mode='MarkdownV2'
            )
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        final_text = render_response(analysis_result)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å GPS
        keyboard = None
        if analysis_result.get('gps') and isinstance(analysis_result.get('gps'), dict):
            lat = analysis_result['gps'].get('latitude')
            lon = analysis_result['gps'].get('longitude')
            if lat is not None and lon is not None:
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å", url=f"https://yandex.ru/maps/?rtext=~{lat},{lon}&z=16"),
                        InlineKeyboardButton("2–ì–∏—Å", url=f"https://2gis.ru/geo/{lon},{lat}"),
                        InlineKeyboardButton("Google", url=f"https://www.google.com/maps?q={lat},{lon}&z=16"),
                    ]
                ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=sent_message.message_id,
            text=final_text or escape_markdown_v2("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ."),
            reply_markup=keyboard,
            parse_mode='MarkdownV2'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_image: {e}", exc_info=True)
        error_text = escape_markdown_v2(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=sent_message.message_id,
            text=error_text,
            parse_mode='MarkdownV2'
        )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram
    request = HTTPXRequest(
        connect_timeout=10.0,
        read_timeout=20.0,
        write_timeout=20.0,
        pool_timeout=30.0,
    )

    application = Application.builder().token(token).request(request).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_image))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
