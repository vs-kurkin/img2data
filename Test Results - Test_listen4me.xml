<?xml version="1.0" encoding="UTF-8"?><testrun duration="197" footerText="Generated by IntelliJ IDEA on 12.07.2025, 12:08" name="Test listen4me">
    <count name="total" value="8"/>
    <count name="failed" value="6"/>
    <count name="passed" value="2"/>
    <config configId="tests" name="Test listen4me">
        <module name="listen4me"/>
        <selectedOptions>
            <option name="environmentVariables" visible="false"/>
        </selectedOptions>
        <option name="ENV_FILES" value="S:/IDEA/listen4me/.env"/>
        <option name="INTERPRETER_OPTIONS" value=""/>
        <option name="PARENT_ENVS" value="true"/>
        <option name="SDK_HOME" value=""/>
        <option name="SDK_NAME" value="Python 3.13"/>
        <option name="WORKING_DIRECTORY" value="S:\IDEA\listen4me"/>
        <option name="IS_MODULE_SDK" value="true"/>
        <option name="ADD_CONTENT_ROOTS" value="true"/>
        <option name="ADD_SOURCE_ROOTS" value="true"/>
        <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py"/>
        <option name="_new_keywords" value="&quot;&quot;"/>
        <option name="_new_parameters" value="&quot;&quot;"/>
        <option name="_new_additionalArguments" value="&quot;&quot;"/>
        <option name="_new_target" value="&quot;S:\\IDEA\\listen4me\\tests\\test_bot.py&quot;"/>
        <option name="_new_targetType" value="&quot;PATH&quot;"/>
        <method v="2">
            <option name="ToolBeforeRunTask" enabled="true" actionId="Tool_External Tools_MCP Server"/>
        </method>
    </config>
    <suite duration="197" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests" name="tests" status="failed">
        <suite duration="197" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot" name="test_bot" status="failed">
            <test duration="1" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot.test_escape_markdown_v2" name="test_escape_markdown_v2" metainfo="test_escape_markdown_v2" status="failed">
                <diff actual="'Hello\\\\1 World\\\\1'" expected="'Hello\\. World\\!'"/>
                <output type="stdout">FAILED                        [ 12%]
</output>
                <output type="stderr">tests\test_bot.py:13 (test_escape_markdown_v2)
'Hello\\\\1 World\\\\1' != 'Hello\\. World\\!'
def test_escape_markdown_v2():
&gt;       assert escape_markdown_v2("Hello. World!") == "Hello\\. World\\!"
E       AssertionError: assert 'Hello\\\\1 World\\\\1' == 'Hello\\. World\\!'
E         
E         - Hello\. World\!
E         ?       ^       ^
E         + Hello\\1 World\\1
E         ?       ^^       ^^
tests\test_bot.py:15: AssertionError
</output>
            </test>
            <test duration="3" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot.test_render_response_full_data" name="test_render_response_full_data" metainfo="test_render_response_full_data" status="failed">
                <diff actual="('&#128302; Test message\n'&#10; '\n'&#10; '❗️ Test error\n'&#10; '\n'&#10; '&#127758; \\\\112\\\\134 56\\\\178\\\\1\n'&#10; '\n'&#10; '&#128681; \\\\1Test address\\\\1\n'&#10; '\n'&#10; '&#128248; \\\\12025\\\\101\\\\101\\\\1')" expected="('&#128302; Test message\\n\\n❗️ Test error\\n\\n&#127758; `12.34 56.78`\\n\\n&#128681; `Test '&#10; 'address`\\n\\n&#128248; `2025-01-01`')"/>
                <output type="stdout">FAILED                 [ 25%]
</output>
                <output type="stderr">tests\test_bot.py:19 (test_render_response_full_data)
('&#128302; Test message\n'
 '\n'
 '❗️ Test error\n'
 '\n'
 '&#127758; \\\\112\\\\134 56\\\\178\\\\1\n'
 '\n'
 '&#128681; \\\\1Test address\\\\1\n'
 '\n'
 '&#128248; \\\\12025\\\\101\\\\101\\\\1') != ('&#128302; Test message\\n\\n❗️ Test error\\n\\n&#127758; `12.34 56.78`\\n\\n&#128681; `Test '
 'address`\\n\\n&#128248; `2025-01-01`')
def test_render_response_full_data():
        data = {
            'message': 'Test message',
            'gps': {'latitude': 12.34, 'longitude': 56.78},
            'address': 'Test address',
            'date': '2025-01-01',
            'promo': 'TESTPROMO', # Этот ключ будет проигнорирован, так как есть GPS
            'error': 'Test error'
        }
        expected = "&#128302; Test message\\n\\n❗️ Test error\\n\\n&#127758; `12.34 56.78`\\n\\n&#128681; `Test address`\\n\\n&#128248; `2025-01-01`"
&gt;       assert render_response(data) == expected
E       AssertionError: assert '&#128302; Test message\n\n❗️ Test error\n\n&#127758; \\\\112\\\\134 56\\\\178\\\\1\n\n&#128681; \\\\1Test address\\\\1\n\n&#128248; \\\\12025\\\\101\\\\101\\\\1' == '&#128302; Test message\\n\\n❗️ Test error\\n\\n&#127758; `12.34 56.78`\\n\\n&#128681; `Test address`\\n\\n&#128248; `2025-01-01`'
E         
E         - &#128302; Test message\n\n❗️ Test error\n\n&#127758; `12.34 56.78`\n\n&#128681; `Test address`\n\n&#128248; `2025-01-01`
E         + &#128302; Test message
E         + 
E         + ❗️ Test error
E         + 
E         + &#127758; \\112\\134 56\\178\\1
E         + 
E         + &#128681; \\1Test address\\1
E         + 
E         + &#128248; \\12025\\101\\101\\1
tests\test_bot.py:30: AssertionError
</output>
            </test>
            <test duration="1" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot.test_render_response_only_promo" name="test_render_response_only_promo" metainfo="test_render_response_only_promo" status="failed">
                <diff actual="'&#128302; Got a promo\\\\1\n\n&#128176; \\\\1PROMO123\\\\1'" expected="'&#128302; Got a promo!\\n\\n&#128176; `PROMO123`'"/>
                <output type="stdout">FAILED                [ 37%]
</output>
                <output type="stderr">tests\test_bot.py:31 (test_render_response_only_promo)
'&#128302; Got a promo\\\\1\n\n&#128176; \\\\1PROMO123\\\\1' != '&#128302; Got a promo!\\n\\n&#128176; `PROMO123`'
def test_render_response_only_promo():
        data = {'promo': 'PROMO123', 'message': 'Got a promo!'}
        expected = "&#128302; Got a promo!\\n\\n&#128176; `PROMO123`"
&gt;       assert render_response(data) == expected
E       AssertionError: assert '&#128302; Got a promo\\\\1\n\n&#128176; \\\\1PROMO123\\\\1' == '&#128302; Got a promo!\\n\\n&#128176; `PROMO123`'
E         
E         - &#128302; Got a promo!\n\n&#128176; `PROMO123`
E         + &#128302; Got a promo\\1
E         + 
E         + &#128176; \\1PROMO123\\1
tests\test_bot.py:35: AssertionError
</output>
            </test>
            <test duration="1" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot.test_render_response_only_error" name="test_render_response_only_error" metainfo="test_render_response_only_error" status="passed">
                <output type="stdout">PASSED                [ 50%]
</output>
            </test>
            <test duration="0" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot.test_render_response_empty" name="test_render_response_empty" metainfo="test_render_response_empty" status="passed">
                <output type="stdout">PASSED                     [ 62%]
</output>
            </test>
            <test duration="180" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot.test_analyze_image_with_gemini_success" name="test_analyze_image_with_gemini_success" metainfo="test_analyze_image_with_gemini_success" status="failed">
                <diff actual="{'error': 'Не удалось обработать изображение. Ошибка: cannot identify image '&#10;          'file &lt;_io.BytesIO object at 0x000001EA41A3ED40&gt;'}" expected="{'message': 'Success'}"/>
                <output type="stdout">FAILED         [ 75%]
</output>
                <output type="stderr">tests\test_bot.py:46 (test_analyze_image_with_gemini_success)
{'error': 'Не удалось обработать изображение. Ошибка: cannot identify image '
          'file &lt;_io.BytesIO object at 0x000001EA41A3ED40&gt;'} != {'message': 'Success'}
MockGenerativeModel = &lt;MagicMock name='GenerativeModel' id='2105634634592'&gt;
    @pytest.mark.asyncio
    @patch('bot.genai.GenerativeModel')
    async def test_analyze_image_with_gemini_success(MockGenerativeModel):
        # Настройка мока
        mock_response = MagicMock()
        mock_response.text = '```json\n{"message": "Success"}\n```'
    
        mock_model_instance = MockGenerativeModel.return_value
        mock_model_instance.generate_content_async = AsyncMock(return_value=mock_response)
    
        # Вызов функции
        image_bytes = b'fake-image-data'
        result = await analyze_image_with_gemini(image_bytes)
    
        # Проверки
&gt;       assert result == {"message": "Success"}
E       AssertionError: assert {'error': 'Не удалось обработать изображение. Ошибка: cannot identify image file &lt;_io.BytesIO object at 0x000001EA41A3ED40&gt;'} == {'message': 'Success'}
E         
E         Left contains 1 more item:
E         {'error': 'Не удалось обработать изображение. Ошибка: cannot identify image '
E                   'file &lt;_io.BytesIO object at 0x000001EA41A3ED40&gt;'}
E         Right contains 1 more item:
E         {'message': 'Success'}
E         
E         Full diff:
E           {
E         -     'message': 'Success',
E         +     'error': 'Не удалось обработать изображение. Ошибка: cannot identify image file '
E         +     '&lt;_io.BytesIO object at 0x000001EA41A3ED40&gt;',
E           }
tests\test_bot.py:62: AssertionError
</output>
            </test>
            <test duration="3" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot.test_analyze_image_with_gemini_api_error" name="test_analyze_image_with_gemini_api_error" metainfo="test_analyze_image_with_gemini_api_error" status="failed">
                <diff actual="'API Failure'" expected="('Не удалось обработать изображение. Ошибка: cannot identify image file '&#10; '&lt;_io.BytesIO object at 0x000001EA41A3E3E0&gt;')"/>
                <output type="stdout">FAILED       [ 87%]
</output>
                <output type="stderr">tests\test_bot.py:64 (test_analyze_image_with_gemini_api_error)
'API Failure' != ('Не удалось обработать изображение. Ошибка: cannot identify image file '
 '&lt;_io.BytesIO object at 0x000001EA41A3E3E0&gt;')
MockGenerativeModel = &lt;MagicMock name='GenerativeModel' id='2105635797184'&gt;
    @pytest.mark.asyncio
    @patch('bot.genai.GenerativeModel')
    async def test_analyze_image_with_gemini_api_error(MockGenerativeModel):
        # Настройка мока для вызова исключения
        mock_model_instance = MockGenerativeModel.return_value
        mock_model_instance.generate_content_async.side_effect = Exception("API Failure")
    
        # Вызов функции
        result = await analyze_image_with_gemini(b'fake-image-data')
    
        # Проверки
        assert "error" in result
&gt;       assert "API Failure" in result["error"]
E       AssertionError: assert 'API Failure' in '\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435. \u041e\u0448\u0438\u0431\u043a\u0430: cannot identify image file &lt;_io.BytesIO object at 0x000001EA41A3E3E0&gt;'
tests\test_bot.py:77: AssertionError
</output>
            </test>
            <test duration="8" locationUrl="python&lt;S:\IDEA\listen4me&gt;://tests.test_bot.test_handle_image_flow" name="test_handle_image_flow" metainfo="test_handle_image_flow" status="failed">
                <diff actual="&lt;MagicMock name='mock.message.chat_id' id='2105637263008'&gt;" expected="12345"/>
                <output type="stdout">FAILED                         [100%]
</output>
                <output type="stderr">tests\test_bot.py:78 (test_handle_image_flow)
&lt;MagicMock name='mock.message.chat_id' id='2105637263008'&gt; != 12345
@pytest.mark.asyncio
    async def test_handle_image_flow():
        # --- Создание мок-объектов Telegram ---
        update = MagicMock()
        context = MagicMock()
    
        # Мок для chat
        update.message.chat.id = 12345 # ID чата теперь не важен, но нужен для вызовов API
        update.message.message_id = 54321
    
        # Мок для photo
        photo_size = MagicMock()
        photo_size.file_id = 'file_id_123'
        update.message.photo = [photo_size]
    
        # Мок для bot
        context.bot = AsyncMock()
        context.bot.get_file.return_value.download_as_bytearray = AsyncMock(return_value=b'fake_image')
    
        # Мок для отправленного сообщения
        sent_message = MagicMock()
        sent_message.message_id = 54322
        context.bot.send_message.return_value = sent_message # Используем send_message для простоты мока
        update.message.reply_text = AsyncMock(return_value=sent_message)
    
        # --- Мокирование зависимостей ---
        with patch('bot.analyze_image_with_gemini', new_callable=AsyncMock) as mock_analyze:
            # Настраиваем, что вернет Gemini
            gemini_result = {
                'message': 'Анализ успешен',
                'gps': {'latitude': 55.75, 'longitude': 37.61}
            }
            mock_analyze.return_value = gemini_result
    
            # --- Вызов обработчика ---
            await handle_image(update, context)
    
            # --- Проверки ---
    
            # 1. Проверяем, что было отправлено начальное сообщение
            update.message.reply_text.assert_called_once_with(
                "&#128064; Смотрю\\.\\.\\.",
                reply_to_message_id=54321,
                parse_mode='MarkdownV2'
            )
    
            # 2. Проверяем, что был вызван анализ изображения
            mock_analyze.assert_called_once_with(b'fake_image')
    
            # 3. Проверяем, что сообщение было отредактировано с правильным текстом и кнопками
            final_text_call = context.bot.edit_message_text.call_args
&gt;           assert final_text_call.kwargs['chat_id'] == 12345
E           AssertionError: assert &lt;MagicMock name='mock.message.chat_id' id='2105637263008'&gt; == 12345
tests\test_bot.py:130: AssertionError
</output>
            </test>
        </suite>
    </suite>
</testrun>
